{
    "resourceType": "Bundle",
    "id": "3dd2f5c1-9d23-4efd-afe8-043fbc76a1aa",
    "meta": {
        "lastUpdated": "2024-02-16T18:45:10.819+00:00"
    },
    "type": "searchset",
    "total": 2,
    "link": [
        {
            "relation": "self",
            "url": "http://localhost:8000/DocumentReference"
        }
    ],
    "entry": [
        {
            "fullUrl": "http://localhost:8000/DocumentReference/2791",
            "resource": {
                "resourceType": "DocumentReference",
                "id": "2791",
                "meta": {
                    "versionId": "1",
                    "lastUpdated": "2024-02-16T17:22:00.256+00:00",
                    "source": "#GqINef9uN1SPEjfS"
                },
                "status": "current",
                "docStatus": "final",
                "type": {
                    "coding": [
                        {
                            "code": "34133-9"
                        }
                    ]
                },
                "content": [
                    {
                        "attachment": {
                            "data": ""
                        },
                        "format": {
                            "code": "urn:hl7-org:sdwg:ccda-structuredBody:2.1"
                        }
                    }
                ]
            },
            "search": {
                "mode": "match"
            }
        },
        {
            "fullUrl": "http://localhost:8000/DocumentReference/2803",
            "resource": {
                "resourceType": "DocumentReference",
                "id": "2803",
                "meta": {
                    "versionId": "1",
                    "lastUpdated": "2024-02-16T17:22:01.842+00:00",
                    "source": "#GqINef9uN1SPEjfS"
                },
                "status": "current",
                "docStatus": "final",
                "type": {
                    "coding": [
                        {
                            "system": "http://loinc.org",
                            "code": "34109-9",
                            "display": "Note"
                        },
                        {
                            "system": "http://loinc.org",
                            "code": "11488-4",
                            "display": "Consultation note"
                        }
                    ]
                },
                "category": [
                    {
                        "coding": [
                            {
                                "system": "http://hl7.org/fhir/us/core/CodeSystem/us-core-documentreference-category",
                                "code": "clinical-note"
                            }
                        ]
                    }
                ],
                "subject": {
                    "reference": "Patient/2805"
                },
                "date": "2016-09-08T08:32:15.000-05:00",
                "author": [
                    {
                        "reference": "Practitioner/2837"
                    }
                ],
                "content": [
                    {
                        "attachment": {
                            "data": "RHIuIFNwZWNpYWxpc3QgLSBTZXB0ZW1iZXIgOCwgMjAxNgogRGVhciBEci4gSGVucnkgTGV2ZW46IFRoYW5rIHlvdSBmb3IgcmVmZXJyaW5nIE1zLiBKb25lcyBmb3IgZXZhbHVhdGlvbi4gQXBwcm94aW1hdGVseSAxOCB5ZWFycyBhZ28sIHNoZSB3YXMgaG9zcGl0YWxpemVkIHdpdGggYSBibGVlZGluZwogICAgICAgICAgICAgICAgICAgIHVsY2VyLiBTaGUgaGFkIGEgQ1Qgc2NhbiBvZiB0aGUgYWJkb21lbiwgd2hpY2ggcmV2ZWFsZWQgZmluZGluZ3MgY29uc2lzdGVudCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZm9jYWwgbm9kdWxhciBoeXBlcnBsYXNpYSAoRk5IKS4gU2hlIGhhcyBoYWQgZXBpZ2FzdHJpYyBhYmRvbWluYWwgcGFpbiBhcyB3ZWxsCiAgICAgICAgICAgICAgICAgICAgYXMgYSBzaWduaWZpY2FudCBjaGFuZ2UgaW4gaGVyIGJvd2VsIG1vdmVtZW50cyBmcm9tIGJhc2VsaW5lIGNvbnN0aXBhdGlvbiB0bwogICAgICAgICAgICAgICAgICAgIGZyZXF1ZW50IGRpYXJyaGVhLiBUaGUgcGFzdCBtZWRpY2FsIGhpc3RvcnkgaXMgb3RoZXJ3aXNlIG5lZ2F0aXZlLiBTaGUgdGFrZXMgbm8KICAgICAgICAgICAgICAgICAgICBwcmVzY3JpcHRpb24gbWVkaWNhdGlvbnMuIFRoZSByZW1haW5kZXIgb2YgdGhlIGhpc3RvcnkgaXMgbm90IGNvbnRyaWJ1dG9yeS4gClBoeXNpY2FsIGV4YW1pbmF0aW9uIHJldmVhbGVkIGEgd2VsbC1hcHBlYXJpbmcgd29tYW4uIFRoZSB2aXRhbCBzaWducwogICAgICAgICAgICAgICAgICAgIHdlcmUgbm9ybWFsLiBUaGUgaGVhZCBhbmQgbmVjayB3ZXJlIHVucmVtYXJrYWJsZS4gVGhlIGx1bmcgZmllbGRzIHdlcmUgY2xlYXIuCiAgICAgICAgICAgICAgICAgICAgVGhlIGhlYXJ0IGV4YW0gd2FzIG5vcm1hbC4gVGhlIGFiZG9tZW4gd2FzIG9iZXNlIHdpdGggbm9ybWFsIGJvd2VsIHNvdW5kcy4gVGhlcmUKICAgICAgICAgICAgICAgICAgICB3YXMgbm8gdGVuZGVybmVzcywgbWFzcywgb3IgaGVwYXRvc3BsZW5vbWVnYWx5LiAKRW5kb3Njb3BpYyBldmFsdWF0aW9uIHJldmVhbGVkIGEgbm9ybWFsIGNvbG9ub3Njb3B5LiBCaW9wc2llcyB0YWtlbgogICAgICAgICAgICAgICAgICAgIHRocm91Z2hvdXQgdGhlIGNvbG9uIHdlcmUgZXNzZW50aWFsbHkgdW5yZW1hcmthYmxlLiBTdG9vbCB0ZXN0cyBmb3IgcGF0aG9nZW5pYwogICAgICAgICAgICAgICAgICAgIG9yZ2FuaXNtcyB3ZXJlIG5lZ2F0aXZlLiBPZiBub3RlLCBvbiB0aGUgdXBwZXIgZW5kb3Njb3B5IGV4YW1pbmF0aW9uLCBubwogICAgICAgICAgICAgICAgICAgIHNpZ25pZmljYW50IGFibm9ybWFsaXRpZXMgd2VyZSBzZWVuOyBob3dldmVyLCB1cG9uIGJpb3BzeSwgZmVhdHVyZXMgb2YgY2VsaWFjCiAgICAgICAgICAgICAgICAgICAgZGlzZWFzZSB3ZXJlIG5vdGVkLgogSW4gc3VtbWFyeSwgdGhpcyBwYXRpZW50IGhhcyBldmlkZW5jZSBvZiBjZWxpYWMgZGlzZWFzZS4gV2UKICAgICAgICAgICAgICAgICAgICBkaXNjdXNzZWQgdGhlIGRpYWdub3NpcyBpbiBkZXRhaWwgaW4gdGhlIG9mZmljZS4gU2hlIHdhcyBhZHZpc2VkIHRvIHVuZGVydGFrZSBhCiAgICAgICAgICAgICAgICAgICAgbGlmZWxvbmcgZ2x1dGVuLWZyZWUgZGlldC4gRm9sbG93dXAgbGFib3JhdG9yaWVzIGluIG15IG9mZmljZSB3ZXJlIG5vdGFibGUgZm9yIGEKICAgICAgICAgICAgICAgICAgICBsb3cgc2VydW0gaXJvbiB3aXRoIGEgbG93LW5vcm1hbCBmZXJyaXRpbi4gVGhlIGJvbmUgZGVuc2l0eSB3YXMgbm9ybWFsLiBSZXBlYXQKICAgICAgICAgICAgICAgICAgICB0cmlwbGUtcGhhc2UgQ1Qgc2NhbiBvZiB0aGUgbGl2ZXIgcmV2ZWFsZWQgbm8gY2hhbmdlIGluIHRoZSByaWdodCBoZXBhdGljIGxvYmUKICAgICAgICAgICAgICAgICAgICBsZXNpb24sIHdoaWNoIGlzIGNvbnNpc3RlbnQgd2l0aCBGTkguIEkgYWR2aXNlZCBwZXJpb2RpYyByZWV2YWx1YXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbGl2ZXIgd2l0aCBpbWFnaW5nLCBhcyB3ZWxsIGFzIGZvbGxvd3VwIGZvciBhbnkgcG90ZW50aWFsIGRldmVsb3BtZW50IG9mCiAgICAgICAgICAgICAgICAgICAgbnV0cml0aW9uYWwgZGVmaWNpZW5jaWVzLiBTaGUgc2hvdWxkIHRha2UgYW4gaXJvbiBzdXBwbGVtZW50IGFuZCBjb250aW51ZSBvbiBhCiAgICAgICAgICAgICAgICAgICAgbGlmZWxvbmcgZ2x1dGVuLWZyZWUgZGlldC4gClRoYW5rIHlvdSBmb3IgdGhlIGNvdXJ0ZXN5IG9mIHRoaXMgcmVmZXJyYWwuIEkgd291bGQgYmUgcGxlYXNlZCB0byBzZWUKICAgICAgICAgICAgICAgICAgICBNcy4gSm9uZXMgaW4gZm9sbG93dXAu"
                        }
                    }
                ],
                "context": {
                    "period": {
                        "start": "2016-09-08"
                    }
                }
            },
            "search": {
                "mode": "match"
            }
        }
    ]
}
